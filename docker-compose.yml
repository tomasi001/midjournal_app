services:
  backend:
    build:
      context: ./apps/backend
      dockerfile: src/api/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./apps/backend/src:/app/src
      - huggingface_cache:/root/.cache/huggingface
    environment:
      - DATABASE_URL=postgresql://youruser:yourpassword@db/yourdb
      - QDRANT_URL=http://qdrant:6333
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/%2F
      - OLLAMA_HOST=${OLLAMA_HOST_OVERRIDE:-http://ollama:11434}
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_started
      rabbitmq:
        condition: service_started
      # ollama:
      #   condition: service_started

  ingestion-worker:
    build:
      context: ./apps/backend
      dockerfile: src/api/Dockerfile
    volumes:
      - ./apps/backend/src:/app/src
      - huggingface_cache:/root/.cache/huggingface
    environment:
      - DATABASE_URL=postgresql://youruser:yourpassword@db/yourdb
      - QDRANT_URL=http://qdrant:6333
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/%2F
    command: ["python", "-u", "src/ingestion/consumer.py"]
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_started
      rabbitmq:
        condition: service_started

  analysis-worker:
    build:
      context: ./apps/backend
      dockerfile: src/api/Dockerfile
    volumes:
      - ./apps/backend/src:/app/src
      - huggingface_cache:/root/.cache/huggingface
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/%2F
      - DATABASE_URL=postgresql://youruser:yourpassword@db/yourdb
      - OLLAMA_HOST=${OLLAMA_HOST_OVERRIDE:-http://ollama:11434}
    command: ["python", "-u", "src/analysis/consumer.py"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  image-gen-worker:
    build:
      context: ./apps/backend
      dockerfile: src/api/Dockerfile
    volumes:
      - ./apps/backend/src:/app/src
      - huggingface_cache:/root/.cache/huggingface
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/%2F
      - DATABASE_URL=postgresql://youruser:yourpassword@db/yourdb
      - OLLAMA_HOST=${OLLAMA_HOST_OVERRIDE:-http://ollama:11434}
      - MINIO_URL=http://minio:9000
      - MINIO_PUBLIC_URL=http://localhost:9000
      - MINIO_ACCESS_KEY=youruser
      - MINIO_SECRET_KEY=yourpassword
      - MINIO_BUCKET=images
    command: ["python", "-u", "src/image_gen/consumer.py"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      minio:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=youruser
      - MINIO_ROOT_PASSWORD=yourpassword
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 2s
      retries: 5

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: yourdb
      POSTGRES_USER: youruser
      POSTGRES_PASSWORD: yourpassword
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U youruser -d yourdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/healthz"]
      interval: 5s
      timeout: 2s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ollama:
  #   image: ollama/ollama:latest
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./apps/backend/prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #   depends_on:
  #     - backend

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "9080:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./apps/backend/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
  #   depends_on:
  #     - prometheus

volumes:
  db_data:
  qdrant_data:
  rabbitmq_data:
  huggingface_cache:
  minio_data:
  # ollama_data:
  # grafana_data:
